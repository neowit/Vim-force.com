<project name="Salesforce Ant tasks" default="no-default-task" basedir="." xmlns:sf="antlib:com.salesforce">
	<!-- 
		# ant config script  file for Bash
		# Maintainer:	Andrey Gavrikov 
		# Version:		1.0
		# Part of vim/force.com plugin
	-->
	<!-- Create the time stamp for DSTAMP-->
	<tstamp />

	<property name="properties.path" value="${properties.path}" />

	<!-- record output in the specified file -->
	<!-- <property name="logOutputFile" value="/tmp/vim-force.com-${DSTAMP}-${TSTAMP}.log" /> -->
	<!-- <property name="logOutputFile" value="/tmp/vim-force.com.log" /> -->
	
	<!-- END OF Modify properties -->
	
	<!-- set to true if deployUnpackaged should just test but NOT deploy anything-->
	<property name="checkOnly" value="false" />


	<!-- ///////////////////////////////////////////////////////////////////////////// -->
	<property environment="env" />
	<echo message="properties.path='${properties.path}/${dest.org.name}.properties'" />

	<property file="${properties.path}/${dest.org.name}.properties" prefix="dest." />
	<property name="srcDir" value="${project.Folder}/src" />
	<property name="package.xml.path" value="${srcDir}/package.xml" />
	<property name="result.file.path" value="${srcDir}/out.txt" />
	<property name="pollWaitMillis" value="10000" /> <!-- 10 seconds is default value, lower values recommended on good connections-->

	<!-- 
	<echo message="logOutputFile=${logOutputFile}" />
	<record append="false" loglevel="verbose" name="${logOutputFile}" description="record output in the specified file" />
	-->
	<!-- ///////////////////////////////////////////////////////////////////////////// -->

	<!-- Retrieve an unpackaged set of metadata from your org -->
	<target name="retrieveSource" description="load metadata from the source Org to be used for deployment to the Target org">
		<echo message="USERNAME=${dest.sf.username}" />
		<echo message="SERVER=${dest.sf.serverurl}" />

		<!-- Retrieve the contents into another directory -->
		<sf:retrieve username="${dest.sf.username}" password="${dest.sf.password}" serverurl="${dest.sf.serverurl}" 
			retrieveTarget="${srcDir}" unpackaged="${package.xml.path}" maxPoll="1000" pollWaitMillis="${pollWaitMillis}"/>
	</target>

	<!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged -->
	<target name="deployUnpackaged"  >
		<echo message="Destination USERNAME=${dest.sf.username}" />
		<echo message="Destination SERVER=${dest.sf.serverurl}" />
		<echo message="Source files folder=${srcDir}" />

		<!--<input message="Press Return key to start deployment from '${srcDir}' into SFDC org '${dest.org.name}'" /> -->
		<!--NOTE: allowMissingFiles is used to make sure that we can do partial deployment, 
			 i.e. only changed files as opposite to all declared in package.xml -->
		<sf:deploy checkOnly="${checkOnly}" username="${dest.sf.username}" password="${dest.sf.password}" 
			serverurl="${dest.sf.serverurl}" deployRoot="${srcDir}" maxPoll="1000" allowMissingFiles="true" pollWaitMillis="${pollWaitMillis}"/>
	</target>

	<!-- The describeMetadata task is used to get detail information of the metadata types currently being supported. -->
	<target name="describeMetadata" description="get detail information of the metadata types currently being supported">
		<echo message="USERNAME=${dest.sf.username}" />
		<echo message="SERVER=${dest.sf.serverurl}" />

		<!-- Retrieve the contents into another directory -->
		<sf:describeMetadata username="${dest.sf.username}" password="${dest.sf.password}" serverurl="${dest.sf.serverurl}" 
			resultFilePath="${result.file.path}" />
	</target>

	<!-- The listMetadata task is used to get detail information about metadata components of a particular type. -->
	<target name="listMetadata" description="get detail information of the metadata types currently being supported">
		<echo message="USERNAME=${dest.sf.username}" />
		<echo message="SERVER=${dest.sf.serverurl}" />

		<!-- Retrieve the contents into another directory -->
		<sf:listMetadata username="${dest.sf.username}" password="${dest.sf.password}" serverurl="${dest.sf.serverurl}"
			metadataType="${metadataType}"
			resultFilePath="${result.file.path}" />
	</target>

	<!-- The bulkRetrieve task is used to download a large number of metadata objects of a particular type into a set of local files. 
		 It automatically generates the list of objects to be retrieved and batches the retrieve process based on the batchSize property-->
    <target name="bulkRetrieve" description="load metadata from the source Org" >
		<echo message="USERNAME=${dest.sf.username}" />
		<echo message="SERVER=${dest.sf.serverurl}" />
    	
        <!-- Retrieve the contents -->
        <sf:bulkRetrieve username="${dest.sf.username}" password="${dest.sf.password}" serverurl="${dest.sf.serverurl}" 
            retrieveTarget="${retrieveOutputDir}" unzip="true" maxPoll="100" metadataType="${metadataType}" />
            
    </target>

	<!-- Delete Files -->
	<target name="deleteUnpackaged" description="remove files from destination org">
		<echo message="USERNAME=${dest.sf.username}" />
		<echo message="SERVER=${dest.sf.serverurl}" />

		<sf:deploy checkOnly="${checkOnly}" username="${dest.sf.username}" password="${dest.sf.password}" serverurl="${dest.sf.serverurl}" 
			deployRoot="${destructiveChangesDir}" maxPoll="1000" />
	</target>

	<!-- Backup Files -->
	<target name="backupSelected" description="backup specified files from destination org">
		<delete dir="${backupDir}/src" failonerror="false"/>
		<mkdir dir="${backupDir}/src"/>
		<!-- Retrieve the contents of the destination data which is about to be Deleted -->
		<sf:retrieve username="${dest.sf.username}" password="${dest.sf.password}" serverurl="${dest.sf.serverurl}" retrieveTarget="${backupDir}/src" 
			unpackaged="${package.xml.file.path}" />

		<zip description="Save destination files which are about to be overwritten" destfile="${backupDir}/${dest.org.name}-${DSTAMP}-${TSTAMP}-src.zip" 
			basedir="${backupDir}/src" update="false" />

	</target>

</project>
