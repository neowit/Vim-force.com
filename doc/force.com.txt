*force.com.txt*	Plugin for developing on force.com      
Author: Andrey Gavrikov
License: Same terms as Vim itself (see |license|)

force.com plugin for Vim                    *force.com* | *salesforce* | *apex*

|force.com-description|   Description
|force.com-features|      Features
|zipped-resources|        How to work with zipped *.resource files
|force.com-limitations|   Limitations
|force.com-system-requirements|     Installation/System requirements
|force.com-config-example|          Minimal config example

|force.com-usage|         Usage
    |apex-project-setup|  creating new force.com project
        |apex-with-eclipse|      using alongside Eclipse IDE
        |apex-plugin-standalone| using without Eclipse
    |apex-commands|       supported commands

|force.com-settings|      Settings
	|force.com-shortcuts-example| example of recommended keyboard shortcuts

|Recommended-Plugins|     other recommended Vim plugins
|force.com-credits|       Credits 

For Vim version 7.3 or later.
Requires :set nocompatible

==============================================================================
DESCRIPTION                                             *force.com-description*

vim-force.com plugin is a bunch of .vim scripts which allow to develop on
force.com platform using only web browser and Vim

It is designed for those who do not feel productive in Force.com IDE for Eclipse

http://www.youtube.com/watch?v=x5zKA6V__co
:ApexRetrieve command demo - http://youtu.be/umO86ji2Iqw


==============================================================================
                                                *force.com-system-requirements* 
                                                       *force.com-installation*

Installation/System requirements 

Before vim-force.com plugin can be used following requirements must be met:

1. Vim version 7.3 or later with :set nocompatible

2. Java JDK/JRE, Version 6.1 or greater
   - Oracle JDK
     http://www.oracle.com/technetwork/java/javase/downloads/index.html

   JDK is not strictly required, JRE will suffice.

3. tooling-force.com.jar
   See releases page here: https://github.com/neowit/tooling-force.com

4. On MS Windows Install shortname.vim 
    http://www.vim.org/scripts/script.php?script_id=433

5. Unpack vim-force.com plugin archive anywhere you like

ex: ~/vim/vim-force.com

6. Enable filetype plugin and syntax highlighting

e.g. add these lines into .vimrc (or _vimrc on windows) >
	set nocompatible 
	filetype plugin on
	syntax on
<

7. Below lines added on step 6, add 'vim-force.com' folder to vim runtime path
   and make sure it loads apexcode filetype detection

e.g. >
	if has("unix")
		let &runtimepath=&runtimepath . ',~/vim/vim-force.com'
	elseif has("win32")
		let &runtimepath=&runtimepath . ',c:\Documents and Settings\username\vimfiles\vim-force.com'
	endif
	" make sure vim loads apexcode filetype detection
	runtime ftdetect/vim-force.com.vim
<

8. Index help file

e.g. >
    :helptags ~/vim/vim-force.com/doc

<    Or if using with pathogen.vim plugin and vim-force.com is in .vim/bundle run >
    :Helptags
<

9. Configure required variables: :help |force.com-settings|


10. Have a look at the config example: :help |force.com-config-example|


==============================================================================
Example of minimal _vimrc configuration for win32    *force.com-config-example*

""""""""""""""""""""""""""""""""" _vimrc """"""""""""""""""""""""""""""""""""" >
 set nocompatible
 
 filetype plugin on
 syntax on
 
 let &runtimepath=&runtimepath . ',c:\Documents and Settings\user\vimfiles\vim-force.com'
 runtime ftdetect/vim-force.com.vim
 
 
 if has("win32")
	let g:apex_tooling_force_dot_com_path = "c:\\temp\\apex\\toolling-force.com.jar"
 	if !exists("g:apex_backup_folder")
 		" full path required here, relative may not work
 		let g:apex_backup_folder="c:\\temp\\apex\\backup"
 	endif
 	if !exists("g:apex_temp_folder")
 		" full path required here, relative may not work
 		let g:apex_temp_folder="c:\\temp\\apex\\gvim-deployment"
 	endif
 	if !exists("g:apex_properties_folder")
 		" full path required here, relative may not work
 		let g:apex_properties_folder="c:\\temp\\vim-force.com-tests\\secure-properties"
 	endif
 	let g:apex_binary_tee = "c:\\bin\\UnixUtils\\tee.exe"
 	let g:apex_binary_touch = "c:\\bin\\UnixUtils\\touch.exe"
 endif	
<
"""""""""""""""""""""" end config example """"""""""""""""""""""""""""""""""""


==============================================================================
USAGE                                                         *force.com-usage*

There are two ways to use force.com plugin
A.|apex-with-eclipse|                       Alongside Force.com IDE for Eclipse
B.|apex-plugin-standalone|                  Standalone, without Eclipse

Both methods assume that there is a <project-name>.properties file available
at the location specified by |'g:apex_properties_folder'|
See salesforce_migration_guide.pdf or 
http://www.salesforce.com/us/developer/docs/daas/index_Left.htm#StartTopic=Content/forcemigrationtool_connect.htm 
for details of .properties file.
Before moving next make sure to configure all global variables listed in |force.com-settings|

Project Setup and Structure                                *apex-project-setup*

	vim force.com plugin uses same project structure as Force.com IDE for Eclipse
		<eclipse project folder>
		--./src
		----./classes
		----./pages
		----./triggers
		----...

	So if you have existing eclipse project then you can start using force.com plugin
	straight away by opening .class or .trigger file with vim
------------------------------------------------------------------------------
A. Using alongside Force.com IDE for Eclipse                *apex-with-eclipse* 


	1. Create Force.com project with Eclipse as usual (selecting necessary metadata types)
	2. [optional] close Eclipse
	3. switch back to file system
	4. go to eclipse Eclipse workspace and locate folder of your project
	5. open any source class (.cls) file with vim
	
	at this point if class code is syntax highlighted then chances are that most of your 
	config is right
	
	6. issue command 
	   :ApexRefreshProject

------------------------------------------------------------------------------
B. vim force.com plugin standalone                     *apex-plugin-standalone*

In this mode Eclipse is not needed

 B.1. Creating new project
	- inside force.com plugin folder locate folder A-ProjectTemplate
	- copy A-ProjectTemplate to the location where you want your project
	  to reside and rename as desired, 
	  ex: '/home/user/projects/My Org (Sandbox)'
	- inside 'src/classes' folder locate A-Fake-Class.cls and open with Vim
	- Issue command:  
	  :ApexRefreshProject

 B.2. Create Class/Page/Trigger with :|ApexNewFile|

------------------------------------------------------------------------------
Plugin exposes following commands:                              *apex-commands*

|ApexCompare|                       compare two projects
|ApexCompareWithPreRefreshVersion|  compare with pre refresh project state

|ApexStage|                         show/switch-to "Stage" buffer
|ApexStageAdd|                      add to Stage file in the current buffer
|ApexStageAddOpen|                  add to Stage files from all open buffers
|ApexStageRemove|                   remove from Stage file in the current buffer
|ApexStageClear|                    clear Stage buffer

|ApexDeploy|                        deploy modified files to SFDC (Metadata API)
|ApexSave|                          save modified files to SFDC (Tooling API)
|ApexDeployOpen|                    deploy all open files
|ApexDeployAll|                     deploy all files in current project
|ApexDeployStaged|                  deploy all files listed in Stage cache
|ApexTest|                          run Unit Tests 
|ApexTestWithCoverage|              run Unit Tests and generate per-line coverage
|ApexTestCoverageShow|              show per-line coverage highligh for file in 
                                    the current or specified buffer
|ApexTestCoverageToggle|            toggle per-line coverage highligh in
                                    current file
|ApexTestCoverageHideAll|           hide per-line coverage highligh in all files

|ApexGitInit|                       initialise new Git repository for current 
                                    project
|ApexPrintChanged|                  display all modified files
|ApexPrintConflicts|                list potential conflicts between local and remote

|ApexRefreshFile|                   refresh current file from SFDC
|ApexRefreshProject|                refresh project from SFDC

|ApexTListToggle|                   toggle taglist (works if 'taglist' plugin 
                                    is installed)

|ApexInitProject|                   initialise new SFDC project
|ApexNewFile|                       create new file

|ApexRetrieve|                      retrieve specified metadata types from server

|ApexRemoveStaged|                  remove Staged files from target SFDC ORG

|ApexLog|                           View last log
|ApexScratch|                       Open scratch pad

|ApexExecuteAnonymous|              run 'Execute Anonymous'
|ApexExecuteAnonymousRepeat|        repeat last 'Execute Anonymous'
------------------------------------------------------------------------------
                                                                  *ApexCompare*
Imagine you have 2 sandboxes of the same Org and want to compare current file
with its counterpart in another sandbox

Example:
Assume following salesforce project folder structure
    .../some-path/sandbox 1/src
    .../some-path/prod org/src
'some-path' may be root of eclipse workspace or any other folder

':ApexCompare' will open directory selection dialogue
Assuming current project is 'sandbox 1' select 'prod org' folder and system will 
open specified (|'g:apex_diff_cmd'|) diff tool with both files 


                                             *ApexCompareWithPreRefreshVersion*
Every time before refresh from SFDC is executed system backs up modified files
from current project in the location specified by |'g:apex_backup_folder'|
Once refresh is complete it is possible to quickly open diff tool to compare
current file with its pre-refresh version.
Same as with |ApexCompare| you only have to pick top level folder of the
relevant backup i.e. parent of ./src/ folder, no need to drill down into
project subfolders.

                                                                  *ApexStage*
Stage is a temporary buffer which can be used as a stack to list files/metadata
types which will be used in subsequent Deploy/Remove operations.

Stage content can be manipulated either by commands like :|ApexStageAdd|,
:|ApexStageRemove|, :|ApexStageClear|, :|ApexStageAddOpen| or directly like any
other text buffer.  
Stage is persistent and retains its content between vim
editing sessions unless explicitly cleared.  If you use :Write command while in
Stage buffer, or just switch from Stage to another file/buffer, Stage content
will be automatically written to a disk file.
See also :|ApexRemoveStaged| and :|ApexDeployStaged|.

                                                                  *ApexStageAdd*
Add current file to |ApexStage|.

                                                              *ApexStageAddOpen*
Cycle through open buffers and add their files to |ApexStage|, provided that these
are supported apex file types.

                                                                    *ApexDeploy*
Use :|ApexDeploy| to deploy all modified files of current project to SFDC.
:|ApexDeploy| uses Metadata API (see also :|ApexSave|)
See also :|ApexPrintChanged|.

All commands in :|ApexDeploy|* family support 2 optional arguments 
- deployment mode: normal deploy or 'checkOnly'
- 'project name' to deploy to.  This name should match file name part of
  .properties file which contains access details.
See |force.com-settings| for details about .properties files.
For example if I am working in "My Sandbox1" project and have 2 .properties files:
"My Sandbox 1.properties" and "My Sandbox 2.properties" then >
 :ApexDeploy
<will deploy by default using "My Sandbox 1.properties" file, while >
 :ApexDeploy My\ Sandbox\ 2
<will deploy files from current project using "My Sandbox 2.properties" file.

Project name argument of all commands in :|ApexDeploy|* family supports completion.
For instance, using project names from the example above >
 :ApexDeploy checkOnly My<Tab>
< will offer "My Sandbox 1" and "My Sandbox 2"

All commands in :|ApexDeploy|* family support <bang>, see |'g:apex_conflict_check'|
for more details.

                                                                      *ApexSave*

Similar to :|ApexDeploy| but uses Tooling API instead of Metadata API.
Takes modified files and tries to save them to SFDC.
In some cases (especially in large Orgs) Tooling API may be a bit quicker than
:|ApexDeploy| which uses Metadata API.
Note: deploy with Tooling API does not work in Production Orgs.

                                                                *ApexDeployOpen*
Deploy to SFDC all files open in current Vim instance.

                                                                 *ApexDeployAll*
Deploy all files in current project.  This feature works reasonably well with
code files, custom labels, page layouts and many other metadata types but
suffers from the same limitations as salesforce.com library for Ant. 
For example - it will not create new Profiles. If profile already exist then it
will complain that it can not rename it, even if you are not trying to rename.
If there are Objects and Workflows in current project then SFDC may complain
that Objects have to be created before workflows, even if all objects already
exist in SFDC.

                                                              *ApexDeployStaged*
Deploy all files previously added by :|ApexStageAdd| command.

                                                                      *ApexTest*
Very basic function that is similar to :|ApexDeploy| but runs unit tests.  
If no class name specified then will run tests in all modified classes that
contain 'testMethod'.

By default no debug log is generated. Default Log level can be configured via
|'g:apex_test_logType'| variable.

:|ApexTest| supports command line parameters (and their completion)
Param: 1 - mode: 'testAndDeploy' or 'checkOnly', default 'testAndDeploy'
Param: 2 - class name - use this parameter to run only unit tests in a specific
           class
Param: 3 - method name - if test class contains several 'testMethod'-s then
           this parameter allows to specify single method to run. Body of all other
           methods will be skipped. This is particularly useful when you want to see log
           file from specific test and do not want other tests to pollute the log.
Param: 4 - target Org/project name. See :|ApexDeploy| for more details

Differences to :|ApexDeploy| 
- if you run :|ApexTest| and get unit tests failure(s) or insufficient overall
  code coverage then SFDC rejects changes and you files are NOT saved in SFDC.

                                                      *ApexTestWithCoverage*
Similar to :|ApexTest| but also generates line-by-line report of code coverage.
Later coverage can be displayed using :|ApexTestCoverageToggle| command.
Note: :|ApexTestCoverageToggle| allows to pipe :|ApexTestCoverageShow| command
ex: >
 :ApexTestWithCoverage checkOnly MyTestClass |ApexTestCoverageShow OtherClass.cls
<

                                                         *ApexTestCoverageShow*
When last test was run with :|ApexTestWithCoverage| a line-by-line report of
code coverage in the current file can be shown with :|ApexTestCoverageShow|. 
Lines not covered by last unit test run will be highlighted with vim 'sign'
function.
Note: this command accepts command line parameter - name of open buffer.
If provided then coverage will be shown for file open in the specified buffer
instead of current file.
ex: >
 :ApexTestCoverageShow MyClass.cls
<

                                                       *ApexTestCoverageToggle*
Shows or hides code coverage highlight for current file.
See :|ApexTestCoverageShow| for more details

                                                      *ApexTestCoverageHideAll*
Hide test coverage highlight signs in all files.

                                                                  *ApexGitInit*
If git is available then :|ApexGitInit| can be used to initialise new git
repository in current force.com project and add (with confirmation) existing
source files.
See apexUtil#gitInit() for the list of supported force.com project resources.
                                                            
                                                            *ApexPrintChanged*
Display changed files, i.e. candidates for deployment to SFDC.

                                                           *ApexPrintConflicts*
Checks if locally modified files have been updated remotely since last time we
deployed local project.  
Takes into account only modified files (see :|ApexPrintChanged|), i.e. files
which would be deployed if :DeployModified command is executed.
See also |'g:apex_conflict_check'|.



                                                              *ApexRefreshFile*
Refresh current (single) file and replace it with its version from SFDC.

                                                           *ApexRefreshProject*
Refresh current project and download new/modified files from SFDC replacing
all local files.

                                                            *ApexTListToggle*
Helper for 'Tagist' plugin (http://vim-taglist.sourceforge.ne)
Taglist plugin does not support mixed filetypes like: apexcode.java 
so we have to trick it like if &filetype was = 'apexcode'
i.e. every time when Taglist is called set filetype=apexcode temporarely
and then revert back to what it was 
See apexcode.vim s:Apex_TList_Toggle() method for more details.

                                                              *ApexInitProject*
Ask some data to the user and create a new project folder and a properties file. 
Finally it will run :|ApexRefreshProject|.
The project folder will be created in the current directory and the properties
file in the path specified by |g:apex_properties_folder|.
It requires an exsting SFDC org. To create one see: https://developer.salesforce.com

The user will be prompted for the following:
1. Project name: Whatever string supported by the OS as a folder name.
2. Username: The SFDC org's username (email format).
3. Password: The password for the given username.
4. Security token: The org security token if needed.
5. Org type: It must be "login" for a dev/prod org or "test" for a sandbox.

                                                                  *ApexNewFile*
Invoke file types menu and create Apex file (class, trigger, etc). 
Not all files currently supported.
File will be created with API version defined by |g:apex_API_version| variable.

                                                                 *ApexRetrieve*
Invoke metadata types list "menu" and load data of specified types.  
Usually :|ApexRefreshProject| will retrieve all types defined in package.xml.
:|ApexRetrieve| can be used to load types which are not part of current package.xml
Use this command when package.xml does not yet contain necessary metadata type(s).
If retrieved type is not part of the package.xml system will offer to
update package.xml accordingly. 
*WARNING* :|ApexRetrieve| command is Experimental. You may want to backup your
project before running :|ApexRetrieve|.

There are 2 potential scenarios which may involve :|ApexReteieve|
1. Load all members of given metadata type
   e.g. to load all Custom Objects you will do something like this >
	:ApexRetrieve
< then select CustomObjects line and then run >
	:Retrieve
<
2. Load selected members of given metadata type
   e.g. to load only Account metadata you will do something like this >
	:ApexRetrieve
< then select CustomObjects line and then run >
	:Expand
< then select Account and run >
	:Retrieve
<

                                                             *ApexRemoveStaged*
Delete staged files from current or specified Org. See |ApexStageAdd|.
Example 1: >
	:ApexRemoveStaged
< will remove all files listed in :ApexStage from the current Org
Example 2: >
	:ApexRemoveStaged My Other Org
< will remove staged files from "My Other Org"

                                                                      *ApexLog*
A shortcut to open (if available) log file generated by last Apex* command.

                                                                  *ApexScratch*
A shortcut to open a scratch file. Useful when combined with
:|ApexExecuteAnonymous| command.
                                                         *ApexExecuteAnonymous*
Execute a block of code.
Block can be either whole current buffer or visual selection

                                                   *ApexExecuteAnonymousRepeat*
A shortcut to repeat last :|ApexExecuteAnonymous| command.
Useful when you want to re-run visual selection which is not currently selected,
or you are not in the buffer where last :|ApexExecuteAnonymous| was run.

==============================================================================
SETTINGS                                                   *force.com-settings*

Before using force.com plgin following variables must be defined (ex: in .vimrc)
The plugin provides the following options that can customise the behaviour the
force.com plugin behaviour. These options should be set in your vimrc.

All of the examples below are for Unix environments. When defining paths for MS
Windows use double slash, like this: >
	let g:apex_backup_folder="c:\\temp\\apex\\backup"
<

Required
|'g:apex_backup_folder'|          project backup folder
|'g:apex_temp_folder'|            temporary folder
|'g:apex_properties_folder'|      login/pass/token credentials
|'g:apex_tooling_force_dot_com_path'|      
                                  full path to tooling.jar

Required MS Windows only
|'g:apex_binary_tee'|             full path to tee.exe executable
|'g:apex_binary_touch'|           full path to touch.exe executable

Optional
|'g:apex_diff_cmd'|                 path to file comparison tool
|'g:apex_ctags_cmd'|                path to exuberant ctags 
|'g:apex_syntax_case_sensitive'|    defines whether Apex syntax highlighting is case sensitive 
|'g:apex_API_version'|              force.com API version to use when create new files, ex: 25.0
|'g:apex_pollWaitMillis'|           number of milliseconds to wait between each
                                    poll of Salesforce to retrieve the results
|'g:apex_maxPollRequests'|          The number of times to poll Salesforce for
                                    the results of the task
|'g:apex_test_logType'|             The debug logging level for tests. 
|'g:apex_conflict_check'|           Control (on/off) conflict check with SFDC before deployment

|'g:apex_java_cmd'|                 custom path to java executable


|'g:apex_tooling_force_dot_com_java_params'|      
                                    pass extra JVM params to tooling jar

|'g:zip_zipcmd'|                    path to zip program
|'g:zip_unzipcmd'|                  path to unzip program

                                                        *'g:apex_backup_folder'*

/path/to/folder where current project source is backed up before refresh from SFDC
Note, full path is required.
ex: 
	let g:apex_backup_folder="/tmp/apex/backup"

                                                          *'g:apex_temp_folder'*

If by default tooling-force.com.jar will use system temp folder for all file
related operations.  If you want to specify an alternative location then set
'g:apex_temp_folder' variable
Note, full path is required.
ex: >
	let g:apex_temp_folder="/tmp/apex/gvim-deployment"
<
                                                   *'g:apex_properties_folder'*	
Path to folder with *.property files which contain SFDC orgs access details
It is recommended to store those files in encrypted folder or partition.
Note, full path is required.
Example below assumes that we are using Truecrypt

ex: >
	let g:apex_properties_folder="/media/truecrypt1"
<
or for win32, assuming that Truecrypt volume is T: >
	let g:apex_properties_folder="t:"
<
                                                          *force.com-unix_utils*
Plugin is using unix utilities 'tee' and 'touch'
On MS Windows these commands are not available out of the box.
UnixUtils for Win32 can be found here: http://unxutils.sourceforge.net/

See |'g:apex_binary_tee'| and |'g:apex_binary_touch'|
On Unix setting these variables is not strictly necessary, unless 'tee' and 'touch'
are not available via $PATH

Plugin also uses other built in shell commands like
'rm', 'mkdir', 'cp' on unix
and
'rmdir', 'copy' on ms windows
But it is assumed that these are generally available out of the box.
If you are using non standard environment then you can define paths to those commands.
See apexOs.vim for details

                                                           *'g:apex_binary_tee'*
Full path to shell command 'tee'
tee - read from standard input and write to standard output and files

ex: >
	let g:apex_binary_tee = "/usr/bin/tee"
<or for win32 >
	let g:apex_binary_tee = "d:\\bin\\UnixUtils\\tee.exe"
<
                                                         *'g:apex_binary_touch'*
Full path to shell command 'touch'
tee - read from standard input and write to standard output and files

ex: >
	let g:apex_binary_touch = "/usr/bin/touch"
<or for win32 >
	let g:apex_binary_touch = "d:\\bin\\UnixUtils\\touch.exe"
<
                                                             *'g:apex_diff_cmd'*
/path/to/file/compare/tool
ex: >
	let g:apex_diff_cmd="/usr/bin/meld"
<
If undefined then internal vimdiff will be used

                                                            *'g:apex_ctags_cmd'*
/path/to/exuberant/ctags/binary
ex: >
	let g:apex_ctags_cmd="/usr/local/bin/ctags"
<
If undefined then first available ctags binary will be used for tag generation

if ctags used to generate tag files then it is useful to add to your ~/.ctags file
following line:
--langmap=java:+.cls.trigger
this way we tell ctags to process Apex classes and triggers as Java files

                                                *'g:apex_syntax_case_sensitive'*
Use this variable to specify that Apex classes and triggers shall use case sensitive
syntax highlighting.
If not specified then Apex default is used - ignore case
ex: >
	let g:apex_syntax_case_sensitive = 1 " make syntax highlighting case sensitive
<

                                                          *'g:apex_API_version'*
Optional.
When commands like |ApexNewFile| generate new *-meta.xml file the 
<apiVersion>25.0</apiVersion> value is taken from 'g:apex_API_version' variable.
Set this variable to the necessary value if default does not meet your needs.
ex: >
	let g:apex_API_version="25.0"
<

                                                       *'g:apex_pollWaitMillis'*
Optional. 
Defaults to 1000. Sets pollWaitMillis for tooling-force.com.jar tasks. 
Number of milliseconds to wait between each poll of Salesforce to retrieve the
results. The smaller the value defined by 'g:apex_pollWaitMillis' the quicker
deploy will finish, but on slow connections larger values, like 10000 may be
necessary.
See ant-salesforce.jar documentation for 'pollWaitMillis' parameter.

                                                      *'g:apex_maxPollRequests'*
Optional. 
Defaults to 1000. Sets maxPollRequests for tooling jar tasks. 
The number of times to poll Salesforce for the results of the task.
Usually default value is sufficient, but if you have a large Org and
|'g:apex_pollWaitMillis'| parameter is short then higher
'g:apex_maxPollRequests' value may be needed.

                                                         *'g:apex_test_logType'*
Optional. 
Defaults to 'None'. Default debug logging level for tests. 
Valid options are 'None', 'Debugonly', 'Db', 'Profiling', 'Callout', and
'Detail'.  See ant-salesforce.jar documentation for 'logType' parameter.

                                                *'g:apex_conflict_check'*
Optional.
By default every time when |:ApexDeploy| or |:ApexTest| command is issued a
check is done if there have been changes to remote (SFDC) version of local
files which are currently being deployed. 
In order to control this behaviour 'g:apex_conflict_check' variable can be
set as follows:
- To disable check  - set to 0
- any other value means - "check always".
ex: >

	let g:apex_conflict_check = 1 " always check
	let g:apex_conflict_check = 0 " never check
<
Note: If you want to disable conflict check for a single :|ApexDeploy| or 
:|ApexTest| operation then use <bang>, ex: >
	:ApexDeploy!
<
                                                             *'g:apex_java_cmd'*
Optional.
If java executable is not found in $PATH then specify custom location like so >
 " windows
 let g:apex_java_cmd = 'c:\\path\\to\\your\\java.exe'
 " *nix
 let g:apex_java_cmd = '/path/to/your/java'
<

                                           *'g:apex_tooling_force_dot_com_path'*
Full path to toolling-force.com.jar.
toolling-force.com.jar can be obtained on 'releases' page here: 
https://github.com/neowit/tooling-force.com
>
 " windows
 let g:apex_tooling_force_dot_com_path = 'c:\\path\\to\\folder\\toolling-force.com.jar'
 " *nix
 let g:apex_tooling_force_dot_com_path = '/path/to/folder/toolling-force.com.jar'
<

                                    *'g:apex_tooling_force_dot_com_java_params'*
Optional.
Allows to pass extra parameters to java virtual machine.
e.g. change default stdout log level to 'info' >
 let g:apex_tooling_force_dot_com_java_params = "-Dorg.apache.commons.logging.simplelog.defaultlog=info"
<

                                             *'g:zip_zipcmd'* *'g:zip_unzipcmd'*
Optional.
In order to handle zipped *.resource files zip and unzip command line binaries
must be available in $PATH or explicitly specified via 'g:zip_zipcmd' and
'g:zip_unzipcmd' variables.
e.g. 
 let g:zip_zipcmd = "/usr/local/bin/zip"
 let g:zip_unzipcmd = "/usr/local/bin/unzip"
<
see also |zipped-resources|

==============================================================================
RECOMMENDED KEYBOARD SHORTCUTS                     *force.com-shortcuts-example*

To further speedup your day-to-day workflow you may want to consider adding 
something like this in your .vimrc file


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Apex code specific Keyboard mapping
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" >
 function! s:setApexShortcuts()
 
 	""""""""""""""""""""""""""""""""""""""""""
 	" Search in files
 	""""""""""""""""""""""""""""""""""""""""""
 
 	" search exact word
 	nmap <leader>sc :noautocmd vimgrep /\<<C-R><C-W>\>/j ../**/*.cls ../**/*.trigger <CR>:cwin<CR>
 	nmap <leader>st :noautocmd vimgrep /\<<C-R><C-W>\>/j ../**/*.trigger <CR>:cwin<CR>
 	nmap <leader>sp :noautocmd vimgrep /\<<C-R><C-W>\>/j ../**/*.page <CR>:cwin<CR>
 	nmap <leader>ss :noautocmd vimgrep /\<<C-R><C-W>\>/j ../**/*.scf <CR>:cwin<CR>
 	nmap <leader>sa :noautocmd vimgrep /\<<C-R><C-W>\>/j ../**/*.cls ../**/*.trigger ../**/*.page ../**/*.scf <CR>:cwin<CR>
 
 	" search - *contains* - partal match is allowed
 	nmap <leader>sC :noautocmd vimgrep /<C-R><C-W>/j ../**/*.cls ../**/*.trigger <CR>:cwin<CR>
 	nmap <leader>sT :noautocmd vimgrep /<C-R><C-W>/j ../**/*.trigger <CR>:cwin<CR>
 	nmap <leader>sP :noautocmd vimgrep /<C-R><C-W>/j ../**/*.page <CR>:cwin<CR>
 	nmap <leader>sS :noautocmd vimgrep /<C-R><C-W>/j ../**/*.scf <CR>:cwin<CR>
 	nmap <leader>sA :noautocmd vimgrep /<C-R><C-W>/j ../**/*.cls ../**/*.trigger ../**/*.page ../**/*.scf <CR>:cwin<CR>
 
 	" prepare search string, but do not run
 	nmap <leader>sm :noautocmd vimgrep /\<<C-R><C-W>\>/j ../**/*.cls ../**/*.trigger ../**/*.page ../**/*.scf \|cwin
 
 	" search visual selection
 	" in this mode we have to delete leading 5 characters '<,'> which system
 	" inserts into command line by default
 	" we also need to use Control+R* combination to get selection into command
 	" line
 	vmap <leader>sc :<Del><Del><Del><Del><Del>noautocmd vimgrep /<C-R><S-*>/j ../**/*.cls ../**/*.trigger <CR>:cwin<CR>
 	vmap <leader>st :<Del><Del><Del><Del><Del>noautocmd vimgrep /<C-R><S-*>/j ../**/*.trigger <CR>:cwin<CR>
 	vmap <leader>sp :<Del><Del><Del><Del><Del>noautocmd vimgrep /<C-R><S-*>/j ../**/*.page <CR>:cwin<CR>
 	vmap <leader>ss :<Del><Del><Del><Del><Del>noautocmd vimgrep /<C-R><S-*>/j ../**/*.scf <CR>:cwin<CR>
 	vmap <leader>sa :<Del><Del><Del><Del><Del>noautocmd vimgrep /<C-R><S-*>/j ../**/*.cls ../**/*.trigger ../**/*.page ../**/*.scf <CR>:cwin<CR>
 
 
 	""""""""""""""""""""""""""""""""""""""""""
 	" CTags shortcuts
 	""""""""""""""""""""""""""""""""""""""""""
 	" shortcut to update ctags DB manually
 	" note for XFCE: disable default workspace 11 switch (Ctrl-F11) shortcut
 	" (settings-> Window Manager -> Keyboard),
 	" otherwise C-F11 in vim does not work
 	map <C-F11> <Esc>:ApexUpdateCtags<CR>
 
 
 	""""""""""""""""""""""""""""""""""""""""""
 	" Tagglist shortcuts
 	""""""""""""""""""""""""""""""""""""""""""
 	" use F3 to toggle Tagglist
 	nmap <silent> <F3> :ApexTListToggle<CR>
 	imap <silent> <F3> <Esc>:ApexTListToggle<CR>
 	vmap <silent> <F3> <Esc>:ApexTListToggle<CR>
 
 endfunction
 
 " load shortcut mapping when one of apexcode file types is detected/loaded
 autocmd FileType apexcode.java call s:setApexShortcuts()
 autocmd FileType apexcode.html call s:setApexShortcuts()
 autocmd FileType apexcode.javascript call s:setApexShortcuts()
<


==============================================================================
FEATURES                                                    *force.com-features*

Build/Save to SFDC 
- with error reporting

Load/update metadata from SFDC

Create triggers/classes/pages

Refresh current file from SFDC

Refresh whole project from SFDC

Execute Anonymous
- whole buffer or selected lines

Run tests
- and display coverage

Search
- find word in classes/triggers
- find word everywhere
- find visual selection

Syntax highlighting
- supports syntax highlighting of Apex Classes, Triggers, Pages, JS Resources

Basic Visualforce code completion
- try following in .page file (do not type single quote characters)
      '<' Ctrl-X,Ctrl-U
      '<apex:' Ctrl-X,Ctrl-U
      '<chatter' Ctrl-X,Ctrl-U

- Handling content of zipped .resource files

                                        *resources_unpacked* *zipped-resources*
Work with zipped content of "staticresources/*.resource" files is done as
follows:
- open any class/page/trigger in Vim as normal to let Vim load vim-force.com
  plugin
- navigate to .resource file and open it as you would open normal file in vim
- if selected .resource file is a valid ZIP archive then vim-force.com will
  extract content of .resource file in a separate folder and will open
  directory listing for that folder so you can select relevant file from
  archive to work with
- now you can modify unpacked files from the .resource you have just "opened"
  Every time you save such unpacked file - the corresponding .resource will be
  updated and changes re-packed
- deployment of such modified .resource files is done same way as with any
  other Apex file, using commands like :|ApexDeploy|, :|ApexSave|, etc.

Note: current version of vim-force.com does not support creating new .resource
files. Use SFDC UI to create new static resource and then call
:|ApexRefreshProject|.

==============================================================================
LIMITATIONS                                             *force.com-limitations*

vim force.com plugin does not support creating force.com project. Use provided
template instead.

Salesforce Metadata API does not (in most cases) report error line numbers
in Visualforce pages making it impossible to go-to actual problem line if
compile/save fails due to syntax error. This is similar to Force.com IDE for
Eclipse.

Current version does not support environment aware code completion
For example if you write >
	String val = 'abc';
< typing >
	val.
< will not bring the list of String methods as Force.com IDE may do.

On MS Windows default configuration spawns separate DOS/CMD window on every call
to command line utility.
It looks like there is a way to overcome this but I have not tried it
@see shell.vim - http://peterodding.com/code/vim/shell/

==============================================================================
RECOMMENDED-PLUGINS                             *force.com-recommended-plugins*

There is a number of great Vim plugins which you may want to consider
- Fugitive - git support
- unite.vim - quick file/buffer open
- NERDTree - project/file-system browsing
- Pathogen - manage individually installed plugins in ~/.vim/bundle
- Session - save/restore open files, like IDE Project
- UltiSnips - implements some of TextMate's snippets features in Vim
- TagBar - a source code browser plugin for Vim


==============================================================================
CREDITS                                                     *force.com-credits*

Credit must go out to Bram Moolenaar and all the Vim developers for
making the world's best editor (IMHO). I also want to thank everyone who
helped and gave me suggestions. I wouldn't want to leave anyone out so I
won't list names.

License
-------
Copyright (c) Andrey Gavrikov.
Distributed under the same terms as Vim itself.
See :help license
===============================================================================
vim:textwidth=78:ts=4:ft=help:norl:wrap:
